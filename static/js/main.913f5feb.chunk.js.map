{"version":3,"sources":["midi/midi$.js","midi/messages/properties.js","midi/messages/createMessageDefinition.js","midi/messages/noteOffMIDIMessage.js","midi/messages/noteOnMIDIMessage.js","midi/messages/unknownMIDIMessage.js","midi/messages/controlChangeMIDIMessage.js","midi/messages/programChangeMIDIMessage.js","midi/messages/pitchBendChangeMIDIMessage.js","midi/messages/index.js","midi/pressedKeys.js","midi/onlyMessageTypes.js","typedPackets.js","exercises/chords.js","intervals.js","TrainerController.js","midi/parse.js","useObservable.js","App.js","useTrainerController.js","serviceWorker.js","index.js"],"names":["midi$","Observable","create","subscriber","navigator","requestMIDIAccess","then","midiAccess","inputs","size","onmidimessage","event","next","error","pipe","share","channel","get","this","data","key","velocity","createMessageDefinition","displayName","properties","matcher","type","Symbol","matches","Object","assign","toString","keys","map","propName","join","createPrototype","value","writable","noteOffMIDIMessage","noteOnMIDIMessage","unknownMIDIMessage","status","data1","data2","controlChangeMIDIMessage","controller","programChangeMIDIMessage","patch","pitchBendChangeMIDIMessage","pressedKeys","observable$","messageTypes","filter","message","includes","onlyMessageTypes","scan","acc","add","delete","sort","OrderedSet","packType","unpackOfType","p","NOTE_NAMES","CHORD_TYPES","note","i","getChordNotes","rootNote","intervals","interval","getChordNotesRelativeToFirstNote","chord","chordNote","first","types","EXERCISE","RESULT","parsedMessages$","find","allConsoleMessages$","m","l","push","List","keyboardKeyState$","exercisesAndResults$","defer","of","random","sample","getDisplayName","chordIntervalsFromRoot","chordNotes","getResult","flatMap","some","index","slice","isSuperset","createExercise","publish","exercise$","merge","switchMap","exercise","repeat","solutions$","console$","useObservable","useState","lastValue","setLastValue","useEffect","subscription","subscribe","unsubscribe","App","trainerController","setController","createdController","TrainerController","useTrainerController","consoleMessages","Set","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.913f5feb.chunk.js","sourcesContent":["import { Observable } from 'rxjs';\r\nimport { share } from 'rxjs/operators';\r\n\r\nexport const midi$ = Observable.create((subscriber) => {\r\n  \r\n  const onMIDISuccess = midiAccess => {\r\n    if (midiAccess.inputs.size === 0) {\r\n      subscriber.error('No MIDI inputs available');\r\n      return;\r\n    }\r\n\r\n    for(let [, input] of midiAccess.inputs) {\r\n      input.onmidimessage = event => {\r\n        subscriber.next(event);\r\n      }\r\n    }\r\n  };\r\n\r\n  navigator.requestMIDIAccess().then(onMIDISuccess, subscriber.error);\r\n\r\n}).pipe(share());","export const status = ({\r\n  get() {\r\n    return this.event.data[0];\r\n  },\r\n});\r\n\r\nexport const data1 = ({\r\n  get() {\r\n    return this.event.data[1];\r\n  },\r\n});\r\n\r\nexport const data2 = ({\r\n  get() {\r\n    return this.event.data[2];\r\n  },\r\n});\r\n\r\nexport const channel = ({\r\n  get() {\r\n    return (this.event.data[0] & 0b00001111) + 1;\r\n  },\r\n});\r\n\r\nexport const key = ({\r\n  get() {\r\n    return this.event.data[1] & 0b01111111;\r\n  },\r\n});\r\n\r\nexport const velocity = ({\r\n  get() {\r\n    return this.event.data[2] & 0b01111111;\r\n  },\r\n});\r\n\r\nexport const controller = ({\r\n  get() {\r\n    return this.event.data[1] & 0b01111111;\r\n  },\r\n});\r\n\r\nexport const value = ({\r\n  get() {\r\n    return this.event.data[2] & 0b01111111;\r\n  },\r\n});\r\n\r\nexport const patch = ({\r\n  get() {\r\n    return this.event.data[1] & 0b01111111;\r\n  },\r\n});\r\n\r\nexport const pitchBendValue = ({\r\n  get() {\r\n    return (this.event.data[1] & 0b01111111) | ((this.event.data[2] & 0b01111111) << 7);\r\n  },\r\n});\r\n","const createPrototype = (properties, displayName, type) => Object.assign(\r\n  Object.create(null, properties), {\r\n    type,\r\n    toString() {\r\n      return `${displayName} MIDI message (${Object.keys(properties).map(propName => `${propName}: ${this[propName]}`).join(', ')})`;\r\n    },\r\n  }\r\n);\r\n\r\nexport const createMessageDefinition = ({ displayName, properties, matcher }) => {\r\n  const type = Symbol(displayName);\r\n  return ({\r\n    type,\r\n    matches: matcher,\r\n    create: event => Object.create(createPrototype(properties, displayName, type), { event: { value: event, writable: false } }),\r\n  });\r\n};","import { channel, key, velocity } from './properties';\r\nimport { createMessageDefinition } from './createMessageDefinition';\r\n\r\nexport const noteOffMIDIMessage = createMessageDefinition({\r\n  displayName: 'Note Off',\r\n  properties: { channel, key, velocity },\r\n  matcher: event => (event.data[0] & 0b11110000) === 0b10000000,\r\n});\r\n","import { channel, key, velocity } from './properties';\r\nimport { createMessageDefinition } from './createMessageDefinition';\r\n\r\nexport const noteOnMIDIMessage = createMessageDefinition({\r\n  displayName: 'Note On',\r\n  properties: { channel, key, velocity },\r\n  matcher: event => (event.data[0] & 0b11110000) === 0b10010000,\r\n});\r\n","import { status, data1, data2 } from './properties';\r\nimport { createMessageDefinition } from './createMessageDefinition';\r\n\r\nexport const unknownMIDIMessage = createMessageDefinition({\r\n  displayName: 'Unknown',\r\n  properties: { status, data1, data2 },\r\n  matcher: () => true,\r\n});\r\n","import { channel, controller, value } from './properties';\r\nimport { createMessageDefinition } from './createMessageDefinition';\r\n\r\nexport const controlChangeMIDIMessage = createMessageDefinition({\r\n  displayName: 'Control Change',\r\n  properties: { channel, controller, value },\r\n  matcher: event => (event.data[0] & 0b11110000) === 0b10110000,\r\n});\r\n","import { channel, patch } from './properties';\r\nimport { createMessageDefinition } from './createMessageDefinition';\r\n\r\nexport const programChangeMIDIMessage = createMessageDefinition({\r\n  displayName: 'Program Change',\r\n  properties: { channel, patch },\r\n  matcher: event => (event.data[0] & 0b11110000) === 0b11000000,\r\n});\r\n","import { channel, pitchBendValue } from './properties';\r\nimport { createMessageDefinition } from './createMessageDefinition';\r\n\r\nexport const pitchBendChangeMIDIMessage = createMessageDefinition({\r\n  displayName: 'Pitch Bend Change',\r\n  properties: { channel, value: pitchBendValue },\r\n  matcher: event => (event.data[0] & 0b11110000) === 0b11100000,\r\n});\r\n","import { noteOffMIDIMessage } from './noteOffMIDIMessage';\r\nimport { noteOnMIDIMessage } from './noteOnMIDIMessage';\r\nimport { unknownMIDIMessage } from './unknownMIDIMessage';\r\nimport { controlChangeMIDIMessage } from './controlChangeMIDIMessage';\r\nimport { programChangeMIDIMessage } from './programChangeMIDIMessage';\r\nimport { pitchBendChangeMIDIMessage } from './pitchBendChangeMIDIMessage';\r\n\r\nexport default [\r\n  noteOffMIDIMessage,\r\n  noteOnMIDIMessage,\r\n  controlChangeMIDIMessage,\r\n  programChangeMIDIMessage,\r\n  pitchBendChangeMIDIMessage,\r\n  unknownMIDIMessage,\r\n];\r\n","import { scan } from 'rxjs/operators';\r\nimport { OrderedSet } from 'immutable';\r\nimport { noteOnMIDIMessage } from './messages/noteOnMIDIMessage';\r\nimport { noteOffMIDIMessage } from './messages/noteOffMIDIMessage';\r\nimport { onlyMessageTypes } from './onlyMessageTypes';\r\n\r\nexport const pressedKeys = () => observable$ => observable$.pipe(\r\n  onlyMessageTypes(noteOnMIDIMessage.type, noteOffMIDIMessage.type),  \r\n  scan(\r\n    (acc, message) => (message.type === noteOnMIDIMessage.type ? acc.add(message.key) : acc.delete(message.key)).sort(),\r\n    OrderedSet(),\r\n  ),\r\n);","import { filter } from 'rxjs/operators';\r\n\r\nexport const onlyMessageTypes = (...messageTypes) => filter(message => messageTypes.includes(message.type));","import { map, filter } from \"rxjs/operators\";\r\n\r\nexport const packType = type => map(value => ({ type, value }));\r\n\r\nexport const unpackOfType = type => observable$ => observable$.pipe(\r\n  filter(p => p.type === type),\r\n  map(p => p.value),\r\n);\r\n","import random from 'lodash.random';\r\nimport { List } from 'immutable';\r\nimport { first, flatMap } from 'rxjs/operators';\r\nimport { pressedKeys } from '../midi/pressedKeys';\r\nimport * as i from '../intervals';\r\nimport sample from 'lodash.sample';\r\n\r\nconst NOTE_NAMES = ['C', 'D♭', 'D', 'E♭', 'E', 'F', 'F♯', 'G', 'A♭', 'A', 'B♭', 'B'];\r\n\r\nconst CHORD_TYPES = [\r\n  [note => `${note}m9 (A)`, [i.MINOR_3RD, i.PERFECT_5TH, i.MINOR_7TH, i.MAJOR_9TH]],\r\n  [note => `${note}m9 (B)`, [i.MINOR_7TH, i.MAJOR_9TH, i.OCTAVE + i.MINOR_3RD, i.OCTAVE + i.PERFECT_5TH]],\r\n  [note => `${note}maj9 (A)`, [i.MAJOR_3RD, i.PERFECT_5TH, i.MAJOR_7TH, i.MAJOR_9TH]],\r\n  [note => `${note}maj9 (B)`, [i.MAJOR_7TH, i.MAJOR_9TH, i.OCTAVE + i.MAJOR_3RD, i.OCTAVE + i.PERFECT_5TH]],\r\n  [note => `${note}13 (A)`, [i.MAJOR_3RD, i.MAJOR_13TH - i.OCTAVE, i.MINOR_7TH, i.MAJOR_9TH]],\r\n  [note => `${note}13 (B)`, [i.MINOR_7TH, i.MAJOR_9TH, i.OCTAVE + i.MAJOR_3RD, i.MAJOR_13TH]],\r\n];\r\n\r\nexport const createExercise = () => {\r\n  const rootNote = random(0, 11);\r\n  const [getDisplayName, intervals] = sample(CHORD_TYPES);\r\n  const chordIntervalsFromRoot = List(intervals).sort();\r\n  const chordNotes = getChordNotes(rootNote, chordIntervalsFromRoot);\r\n  \r\n  const getResult = parsedMessages$ => parsedMessages$.pipe(\r\n    pressedKeys(),\r\n    flatMap(\r\n      keys => {\r\n        if (!keys.size) {\r\n          return [];\r\n        }\r\n        if (!chordNotes.some((chordNote, index) =>\r\n          (chordNote % 12 === keys.first() % 12) &&\r\n          getChordNotesRelativeToFirstNote(chordNotes.slice(index)).isSuperset(getChordNotesRelativeToFirstNote(keys))\r\n        )) {\r\n          return [false];\r\n        }\r\n\r\n        if (chordNotes.size === keys.size) {\r\n          return [true];\r\n        }\r\n\r\n        return [];\r\n      }\r\n    ),\r\n    first(),\r\n  );\r\n\r\n  return {\r\n    displayName: getDisplayName(NOTE_NAMES[rootNote]),\r\n    getResult,\r\n  }\r\n};\r\n\r\nconst getChordNotes = (rootNote, intervals) => intervals.map(interval => rootNote + interval);\r\n\r\nconst getChordNotesRelativeToFirstNote = chord => chord.map(chordNote => chordNote - chord.first());\r\n","export const ROOT = 0;\r\nexport const MINOR_2ND = 1;\r\nexport const MAJOR_2ND = 2;\r\nexport const MINOR_3RD = 3;\r\nexport const MAJOR_3RD = 4;\r\nexport const PERFECT_4TH = 5;\r\nexport const AUGMENTED_4TH = 6;\r\nexport const DIMINISHED_5TH = 6;\r\nexport const PERFECT_5TH = 7;\r\nexport const MINOR_6TH = 8;\r\nexport const MAJOR_6TH = 9;\r\nexport const MINOR_7TH = 10;\r\nexport const MAJOR_7TH = 11;\r\nexport const OCTAVE = 12;\r\nexport const MINOR_9TH = 13;\r\nexport const MAJOR_9TH = 14;\r\nexport const MINOR_10TH = 15;\r\nexport const MAJOR_10TH = 16;\r\nexport const PERFECT_11TH = 17;\r\nexport const AUGMENTED_11TH = 18;\r\nexport const PERFECT_12TH = 19;\r\nexport const MINOR_13TH = 20;\r\nexport const MAJOR_13TH = 21;\r\nexport const MINOR_14TH = 22;\r\nexport const MAJOR_14TH = 23;\r\nexport const DOUBLE_OCTAVE = 24;\r\n","import { midi$ } from './midi/midi$';\r\nimport { parse } from './midi/parse';\r\nimport { pressedKeys } from './midi/pressedKeys';\r\nimport { defer, of, merge } from 'rxjs';\r\nimport { first, switchMap, share, repeat, publish, scan, map } from 'rxjs/operators';\r\nimport { packType, unpackOfType } from './typedPackets';\r\nimport { createExercise } from './exercises/chords';\r\nimport { List } from 'immutable';\r\n\r\nconst types = {\r\n  EXERCISE: Symbol('EXERCISE'),\r\n  RESULT: Symbol('RESULT'),\r\n};\r\n\r\nexport const create = () => {\r\n  const parsedMessages$ = midi$.pipe(parse());\r\n  const consoleMessages$ = parsedMessages$.pipe(map(m => m.toString()));\r\n  const allConsoleMessages$ = consoleMessages$.pipe(scan((l, m) => l.push(m), List()));\r\n  const keyboardKeyState$ = parsedMessages$.pipe(pressedKeys());\r\n\r\n  const singleExercise$ = defer(() => of(createExercise()));\r\n  const exercisesAndResults$ = singleExercise$.pipe(\r\n    publish(\r\n      exercise$ => merge(\r\n        exercise$.pipe(packType(types.EXERCISE)),\r\n        exercise$.pipe(\r\n          switchMap(exercise => exercise.getResult(parsedMessages$)),\r\n          first(),\r\n          packType(types.RESULT),\r\n        )\r\n      )\r\n    ),\r\n    repeat(),\r\n    share(),\r\n  );\r\n\r\n  return {\r\n    keyboardKeyState$,\r\n    exercise$: exercisesAndResults$.pipe(unpackOfType(types.EXERCISE)),\r\n    solutions$: exercisesAndResults$.pipe(unpackOfType(types.RESULT)),\r\n    console$: allConsoleMessages$,\r\n  };\r\n};\r\n\r\n// const log = label => tap(v => { console.log(label, v); });\r\n","import { map } from \"rxjs/operators\";\r\nimport messageTypes from './messages';\r\n\r\nexport const parse = () => map(event => messageTypes.find(type => type.matches(event)).create(event));\r\n","import { useState, useEffect } from 'react';\r\n\r\nexport const useObservable = (observable$) => {\r\n  const [lastValue, setLastValue] = useState(null);\r\n  useEffect(() => {\r\n    if (observable$) {\r\n      const subscription = observable$.subscribe(setLastValue);\r\n      return () => subscription.unsubscribe();\r\n    } \r\n  }, [observable$]);\r\n\r\n  return lastValue;\r\n};\r\n","import React from 'react';\r\nimport { useTrainerController } from './useTrainerController';\r\nimport { useObservable } from './useObservable';\r\nimport { Keyboard } from './Keyboard';\r\nimport './App.css';\r\nimport { Set } from 'immutable';\r\n\r\nconst App = () => {\r\n  const trainerController = useTrainerController();\r\n  const keyboardKeyState = useObservable(trainerController?.keyboardKeyState$) || Set();\r\n  const exercise = useObservable(trainerController?.exercise$);\r\n  const lastSolution = useObservable(trainerController?.solutions$);\r\n  const consoleMessages = useObservable(trainerController?.console$);\r\n\r\nreturn trainerController && (<div>{ consoleMessages?.map(m => <p>{ m }</p>) }</div>);\r\n    // <svg\r\n    //   width=\"100%\"\r\n    //   height=\"100%\"\r\n    //   viewBox=\"0 0 160 90\"\r\n    //   preserveAspectRatio=\"xMidYMid meet\"\r\n    //   style={{\r\n    //     backgroundColor: 'hsl(120, 5%, 60%)',\r\n    //   }}>\r\n    //   <filter id=\"dropShadow\" height=\"130%\">\r\n    //     <feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"1\"/>\r\n    //     <feOffset dx=\"1\" dy=\"1\" result=\"offsetblur\"/>\r\n    //     <feComponentTransfer>\r\n    //       <feFuncA type=\"linear\" slope=\"0.5\"/>\r\n    //     </feComponentTransfer>\r\n    //     <feMerge> \r\n    //       <feMergeNode/>\r\n    //       <feMergeNode in=\"SourceGraphic\"/>\r\n    //     </feMerge>\r\n    //   </filter>\r\n    //   <rect x=\"5%\" y=\"5%\" width=\"90%\" height=\"90%\" fill=\"white\" stroke=\"black\" strokeWidth=\"0.1\" style={{ filter: 'url(#dropShadow)' }} />\r\n    //   <svg x=\"6%\" y=\"6%\" width=\"88%\" height=\"88%\">\r\n    //     <Keyboard keyState={keyboardKeyState} x=\"0%\" y=\"0%\" width=\"100%\" />\r\n    //     <text x=\"50%\" y=\"50%\" dominantBaseline=\"central\" textAnchor=\"middle\" style={{ fontSize: 25 }}>{exercise?.displayName}</text>\r\n    //     { lastSolution !== null && <rect x=\"0\" y=\"95%\" width=\"100%\" height=\"5%\" fill={lastSolution ? 'green' : 'red'} /> }\r\n    //   </svg>\r\n    // </svg>\r\n    //);\r\n};\r\n\r\nexport default App;\r\n","import { useEffect, useState } from 'react';\r\nimport * as TrainerController from './TrainerController';\r\n\r\nexport const useTrainerController = () => {\r\n  const [controller, setController] = useState(null);\r\n\r\n  useEffect(() => {\r\n    const createdController = TrainerController.create();\r\n    setController(createdController);\r\n  }, []);\r\n\r\n  return controller;\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}